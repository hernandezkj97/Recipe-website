{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","Style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yQAmBeA,EAhBA,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,YACrC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,mCAAMN,KACN,6BACKG,EAAYI,KAAI,SAAAC,GAAU,OACvB,oBAAIJ,UAAWC,IAAMF,YAArB,SAAmCK,EAAWC,YAGtD,oBAAGL,UAAWC,IAAMJ,SAApB,uBAAyCA,KACzC,qBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,SCyC1CC,EAlDJ,WAET,IAEA,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwBJ,mBAAS,WAAjC,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAW,WACTC,MACA,CAACH,IAEJ,IAAMG,EAAU,uCAAI,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCL,EAApC,mBAXhB,WAWgB,oBAVd,qCASI,cACZM,EADY,gBAEHA,EAASC,OAFN,OAEfC,EAFe,OAGrBX,EAAWW,EAAKC,MAHK,2CAAJ,qDAoBf,OACA,sBAAKvB,UAAU,MAAf,UACA,uBAAMwB,SARW,SAAAC,GACnBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAKmBb,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa2B,KAAK,OAAOC,MAAOhB,EAAQiB,SAfxC,SAAAJ,GACrBZ,EAAUY,EAAEK,OAAOF,UAef,wBAAS5B,UAAU,gBAAgB2B,KAAK,SAAxC,uBAGF,sBAAK3B,UAAU,UAAf,UACCU,EAAQP,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAAkCN,MAAOM,EAAOA,OAAO6B,MAAOlC,SAAUK,EAAOA,OAAOL,SAAUC,MAAQI,EAAOA,OAAOJ,MAAOC,YAAaG,EAAOA,OAAOH,aAA3IG,EAAOA,OAAO6B,UAF7B,WC/BaC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,SAAW,yBAAyB,YAAc,+B","file":"static/js/main.74743971.chunk.js","sourcesContent":["import React from 'react'; \r\nimport Style from './recipe.module.css'\r\n\r\nconst Recipe = ({title, calories, image, ingredients}) =>{\r\n    return(\r\n        <div className={Style.recipe}>\r\n            <h1> {title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient=>(\r\n                    <li className={Style.ingredients}>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p className={Style.calories}>Calories: {calories}</p>\r\n            <img className={Style.image} src={image} alt=\"\"/>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;","\nimport React, {useEffect, useState} from 'react'\nimport './App.css';\nimport Recipe from './Recipe'\nconst App =() => {\n\n  const APP_ID='89860428';\n  const APP_KEY= 'b92b46cbd5392d73846cc6a2326d8bb0';\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery]=useState('chicken')\n  \n  useEffect( () =>{\n    getRecipes();\n  },[query]);\n\n const getRecipes =  async ()=>{\n   const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\nconst data= await response.json();\nsetRecipes(data.hits);\n\n\n };\n\n const updateSearch= e =>{\nsetSearch(e.target.value);\n\n\n };\n\n const getSearch = e =>{\ne.preventDefault();\nsetQuery(search);\nsetSearch('');\n }\n\n  return (\n  <div className=\"App\">\n  <form onSubmit={getSearch} className=\"search-form\">\n    <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n    <button  className=\"search-button\" type=\"submit\" >Search</button>\n\n  </form>\n  <div className=\"recipes\">\n  {recipes.map(recipe=>(\n    <Recipe key={recipe.recipe.label} title={recipe.recipe.label} calories={recipe.recipe.calories} image ={recipe.recipe.image} ingredients={recipe.recipe.ingredients}/>\n  ))};\n  </div>\n  </div>\n);\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3Yfba\",\"image\":\"recipe_image__32TLb\",\"calories\":\"recipe_calories__dt_u_\",\"ingredients\":\"recipe_ingredients__SiF7p\"};"],"sourceRoot":""}